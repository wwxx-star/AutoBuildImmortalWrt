name: Build boxs by ophub
on:
  workflow_dispatch:
    inputs:
      openwrt_kernel:
        description: "选择构建的内核 当高版本内核没有时 系统会自动挑选匹配的内核。比如radxa e52c 即便你选择了6.1.y 可能最终构建还是5.10.160"
        required: false
        default: "6.1.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
      openwrt_board:
        description: "选择型号"
        required: false
        default: "s922x-oes-plus"
        type: choice
        options:
          - s922x-oes-plus
      include_docker:
        description: |
          是否编译 Docker 插件
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_store:
        description: "集成 store 商店"
        required: false
        type: boolean
        default: true
      skip_imagebuilder:
        description: "直接使用底包快速构建固件, 忽略自定义插件 ----（跳过 ImageBuilder）"
        required: false
        default: false
        type: boolean
      replace_banner:
        description: '替换为ImmortalWrt的banner信息'
        required: false
        default: false
        type: boolean
      rootfs_partsize:
        description: '软件包大小1G固定'
        required: true
        default: "1024"
        type: choice
        options:
          - '1024'
      builder_name:
        description: "设置打包作者的名称"
        required: true
        default: 'wukongdaily'

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/n1/build.sh

      - name: Debug workspace contents
        run: ls -R
      
      - name: Enable Store integration
        run: |
          if [ "${{ github.event.inputs.enable_store }}" == "true" ]; then
            echo 'CUSTOM_PACKAGES="$CUSTOM_PACKAGES luci-app-store"' >> shell/custom-packages.sh
            echo "✅ 已追加 luci-app-store"
          else
            echo "❎ 未启用 luci-app-store"
          fi

      - name: 处理是否替换 banner 信息
        if: ${{ github.event.inputs.skip_imagebuilder == 'false' && github.event.inputs.replace_banner == 'true' }}
        run: |
          # 使用ImageBuilder构建 且用户勾选了替换banner时
          cp n1/99-banner.sh files/etc/uci-defaults/
      
      - name: Build Rootfs for Radxa and Other Boards (ImmortalWrt)
        if: ${{ github.event.inputs.skip_imagebuilder != 'true' }}
        run: |
          echo "✅ 使用 ImageBuilder 构建 rootfs"
          profiles="generic"
          include_docker="${{ github.event.inputs.include_docker }}"
          rootfs_partsize="${{ github.event.inputs.rootfs_partsize }}"
          
          IFS=',' read -r -a profile_array <<< "$profiles"
          
          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"
            
            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/files/etc/uci-defaults:/home/build/immortalwrt/files/etc/uci-defaults" \
              -v "${{ github.workspace }}/arch/arch.conf:/home/build/immortalwrt/files/etc/opkg/arch.conf" \
              -v "${{ github.workspace }}/shell:/home/build/immortalwrt/shell" \
              -v "${{ github.workspace }}/n1/banner:/home/build/immortalwrt/files/mnt/banner" \
              -v "${{ github.workspace }}/n1/imm.config:/home/build/immortalwrt/.config" \
              -v "${{ github.workspace }}/n1/build.sh:/home/build/immortalwrt/build.sh" \
              -e PROFILE=$profile \
              -e INCLUDE_DOCKER=$include_docker \
              -e ROOTFS_PARTSIZE=$rootfs_partsize \
              immortalwrt/imagebuilder:armsr-armv8-openwrt-24.10.2 /bin/bash /home/build/immortalwrt/build.sh
          done
          
      - name: Download prebuilt rootfs.tar.gz
        if: ${{ github.event.inputs.skip_imagebuilder == 'true' }}
        run: |
          echo "📦 正在下载预构建 rootfs"
          mkdir -p bin/targets/armsr/armv8
          curl -L -o bin/targets/armsr/armv8/openwrt-armvirt-64-default-rootfs.tar.gz \
            https://github.com/wukongdaily/AutoBuildImmortalWrt/releases/download/rootfs/immortalwrt-24.10.2-armsr-armv8-generic-rootfs.tar.gz

      - name: 查找rootfs.tar.gz所在路径
        id: find_rootfs
        run: |
          ROOTFS_FILE=$(find bin/targets/armsr/armv8/ -type f -name "*rootfs.tar.gz" | head -n1)
          echo "✅ Found: $ROOTFS_FILE"
          if [ ! -f "$ROOTFS_FILE" ]; then
            echo "❌ 找不到 rootfs.tar.gz 文件"
            exit 1
          fi
          echo "file=$ROOTFS_FILE" >> $GITHUB_OUTPUT

      - name: Package armsr-armv8 as ImmortalWrt by ophub
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: ${{ steps.find_rootfs.outputs.file }}
          openwrt_board: ${{ inputs.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: true
          kernel_repo: "ophub/kernel"
          kernel_usage: flippy
          builder_name: ${{ inputs.builder_name }}

      - name: Rename .img.gz files
        id: rename
        run: |
          MODEL=${{ inputs.openwrt_board }}
          for FILE in ${{ env.PACKAGED_OUTPUTPATH }}/*.img.gz; do
            echo "Processing file: $FILE"
            FILENAME=$(basename "$FILE")
            KERNEL_VERSION=$(echo "$FILENAME" | grep -oP 'k\d+\.\d+\.\d+') 
            if [[ -z "$KERNEL_VERSION" ]]; then
              echo "Skipped: Could not extract kernel version from $FILENAME"
              continue
            fi
            NEW_NAME="immortalwrt-24.10.2-$MODEL-btrfs-$KERNEL_VERSION.img.gz"
            mv "$FILE" "${{ env.PACKAGED_OUTPUTPATH }}/$NEW_NAME"
            echo "Renamed to: $NEW_NAME"
          done

      - name: Upload firmware to GitHub Releases
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: ophub
          name: ImmortalWrt for boxs
          body_path: ${{ github.workspace }}/n1/box.md
          files: |
            ${{ env.PACKAGED_OUTPUTPATH }}/*.img.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
